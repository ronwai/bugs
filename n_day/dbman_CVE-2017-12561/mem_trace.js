// adapted from https://blog.ret2.io/2018/08/28/pwn2own-2018-sandbox-escape/#dbi-guided-exploitation
var allocations = {}
var lock = null;
Interceptor.attach(Module.findExportByName("MSVCR90", "malloc"),
{
    onEnter: function (args) {
        while (lock == "free") { Thread.sleep(0.0001); }
        lock = "malloc";
        this.m_size = args[0];
    },
    onLeave: function (retval) {
        console.log("malloc(" + this.m_size + ") = " + retval);
        allocations[retval] = this.m_size;
        lock = null;
    } 
});

Interceptor.attach(Module.findExportByName("MSVCR90", "free"),
{
    onEnter: function (args) {
        while (lock == "malloc"){ Thread.sleep(0.0001); }
        lock = "free";
        this.m_ptr = args[0];
}   ,
    onLeave: function (retval) {
        console.log("free(" + this.m_ptr + ") = " + retval);
        delete allocations[this.m_ptr];
        lock = null;
    } 
});

var pRestartDb = ptr("0x00417080");
Interceptor.attach(pRestartDb, {
    onEnter: function(args) { console.log('[i] pRestartDb - threadId: ' + this.threadId);
 }
});

Process.setExceptionHandler(function(details) {
    Interceptor.flush();
    console.log('[i] Allocations: ' + JSON.stringify(allocations));
    console.log('[x] Exception: ' + JSON.stringify(details));
    if (details.type === "access-violation") {
        dumpAddr('@esi', details.context.esi, 0x24);
    }
    return false;
});

function dumpAddr(info, addr, size) {
    if (addr.isNull())
        return;

    var size = size > 0x100 ? 0x100 : size;
    console.log('Data dump ' + info + ' :');
    var buf = Memory.readByteArray(addr, size);
    
    // If you want color magic, set ansi to true
    console.log(hexdump(buf, { offset: 0, length: size, header: true, ansi: false }));
    if (size > 100) {
        console.log('[..truncated...]');
    }
}